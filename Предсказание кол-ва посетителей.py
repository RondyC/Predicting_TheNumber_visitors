# -*- coding: utf-8 -*-
"""Герауф Никита Александрович 10. Творческая работа

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/154ipU7QaDHrvP2Yy5zuq83riK2acvtpu

***Задание по предсказанию количества посетителей (с искусственным созданием количества реальных посетителей).***

Часть 1. Загрузка данных и определение искусственного количества посетителей.

1) Цель: подготовка данные для анализа и создать искусственные данные о количестве посетителей.

2) Действия:

* Загрузка данных о погоде (из 1663 файлов с данными о погоде, были выбраны 100 случайных) и дополнительной информации из предоставленных файлов. Файлы могут быть загружены с помощью функции load_csv_from_gdrive, которая берет URL-адрес файла с Google Drive и загружает его содержимое.
* Объеденение данных о погоде с дополнительной информацией, такой как информация о магазинах и станциях наблюдения, с помощью операций объединения (merge).
* Преобразование столбца с датой в формат datetime и создание нового столбца, отражающего количество дней с начала наблюдений.
* Обработка пропущенных значений в числовых столбцах, заполнив их средними значениями соответствующих столбцов.
* Определение искусственного количества посетителей, и добавление его в данные.

Часть 2. Предсказание количества посетителей и сравнение моделей.

1) Цель: построение модели для предсказания количества посетителей и оценка ее эффективности.

2) Действия:

* Разделение данных на тренировочные и тестовые наборы.
* Обучение нескольких моделей регрессии (Random Forest и Gradient Boosting) на тренировочных данных для предсказания количества посетителей.
* Оценка модели на тестовых данных, используя метрики качества, такие как среднеквадратичная ошибка (MSE) и коэффициент детерминации (R^2).
* Визуализация результатов, сравнив истинные значения количества посетителей с предсказанными значениями для каждой модели. Использование графика рассеяния для наглядности.

Получение количества искусственных посетителей

---

**Этапы создания данных функции generate_synthetic_visitors**

1.	*Время (time)*: создаётся массив времени от 0 до size-1.
2.	*Сезонный эффект (seasonal_effect)*: моделируется с помощью синусоидальной функции, которая колеблется в зависимости от времени года. Здесь используется комбинация синусоидальных и косинусоидальных функций для добавления сезонности с периодом 365 дней.
3.	*Тренд (trend_effect)*: тренд моделируется с помощью логарифмической функции, которая растёт медленнее с течением времени. Это имитирует, например, устойчивый рост популярности чего-то.
4.	*Нормальное распределение посетителей (normal_visitors)*: на основе базового уровня посетителей, тренда и сезонности создается распределение посетителей с определённой дисперсией (разбросом).
5.	*Шум (noise_effect)*: добавляется небольшой случайный шум, чтобы данные выглядели более реалистичными.
6.	*Итоговое количество посетителей (visitors)*: суммируются базовые значения, тренд, сезонность и шум. Также используется функция np.maximum(0, ...), чтобы убрать отрицательные значения, т.к. количество посетителей не может быть отрицательным.
7.	*Эффекты событий*: если указаны, к определённым дням добавляются эффекты от событий. Например, в праздничный день количество посетителей может значительно возрасти.
8.	*Эффекты погоды*: если указаны, количество посетителей корректируется на основе погодных факторов. Например, сильная жара или холод могут уменьшить количество посетителей.
9.	*Выбросы*: с некоторой вероятностью в данных могут появляться выбросы — дни с необычно большим количеством посетителей. Это моделирует случайные события, которые значительно влияют на посещаемость.
Возвращаемое значение
Функция возвращает массив visitors — итоговое количество синтетических посетителей на каждый день, учитывая все перечисленные факторы.

---

1. Импорт библиотек и определение функций
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def load_csv_from_gdrive(url, delimiter=','):
    file_id = url.split('/')[5]
    download_url = f'https://drive.google.com/uc?id={file_id}'
    try:
        data = pd.read_csv(download_url, delimiter=delimiter, on_bad_lines='skip')
        return data
    except Exception as e:
        print(f"Ошибка загрузки файла {download_url}: {e}")
        return None

def generate_synthetic_visitors(size, base=20, variance=50, trend=1, seasonality=10,
                                noise=5, outlier_prob=0.01, outlier_factor=2,
                                event_effects=None, weather_effects=None):
    time = np.arange(size)

    seasonal_effect = seasonality * (np.sin(2 * np.pi * time / 365) + 0.5 * np.cos(2 * np.pi * time / 182.5))

    trend_effect = trend * np.log1p(time)

    normal_visitors = np.random.normal(loc=base + trend_effect + seasonal_effect, scale=variance, size=size)

    noise_effect = np.random.normal(loc=0, scale=noise, size=size)

    visitors = np.maximum(0, normal_visitors + noise_effect).astype(int)

    if event_effects is not None:
        for day, effect in event_effects.items():
            if 0 <= day < size:
                visitors[day] += effect

    if weather_effects is not None:
        for weather_factor, sensitivity in weather_effects.items():
            visitors = visitors + (sensitivity * np.random.normal(loc=0, scale=weather_factor, size=size)).astype(int)

    n_outliers = int(size * outlier_prob)
    outlier_indices = np.random.choice(size, n_outliers, replace=False)
    visitors[outlier_indices] = np.maximum(0, visitors[outlier_indices] * outlier_factor)

    return visitors

"""

---

2. Использование функции"""

event_effects = {
    30: 100,   # Праздник на 30-й день
    120: 200,  # Праздник на 120-й день
}

weather_effects = {
    10: -2,    # Влияние температуры (каждые 10°C изменения = -2 посетителя)
}

synthetic_visitors = generate_synthetic_visitors(365, event_effects=event_effects, weather_effects=weather_effects)

"""**Пояснение работы функции.**
Функция generate_synthetic_visitors создаёт синтетические данные о количестве посетителей на каждый день в течение определённого периода времени. Она моделирует различные факторы, такие как базовое количество посетителей, сезонные колебания, тренды, случайный шум, а также эффекты от событий и погоды. Давайте подробно разберём каждый элемент этой функции:

**Параметры функции:**
1.	*size*: количество дней, для которых нужно сгенерировать данные. Если size = 365, данные будут сгенерированы на целый год.
2.	*base*: базовое количество посетителей в день, вокруг которого строятся остальные эффекты. Это как бы среднее количество посетителей без учета сезонности, тренда и других факторов.
3.	*variance*: разброс, или стандартное отклонение количества посетителей вокруг базового уровня. Чем больше значение, тем более разбросанными будут данные.
4.	*trend*: коэффициент, отвечающий за тренд (он же общая направленность) роста или спада количества посетителей со временем.
5.	*seasonality*: амплитуда сезонных колебаний. В реальных данных количество посетителей может зависеть от времени года, например, может увеличиваться летом и уменьшаться зимой.
6.	*noise*: уровень случайного шума, который добавляется к количеству посетителей для придания реалистичности данным.
7.	*outlier_prob*: вероятность появления выбросов (значительных отклонений от среднего значения). Это может моделировать, например, случайные пиковые значения в данных.
8.	*outlier_factor*: множитель, который увеличивает значение выбросов. Если на какой-то день выпадает выброс, его количество посетителей будет умножено на этот фактор.
9.	*event_effects*: словарь, где ключи — это дни, а значения — это дополнительные посетители, которые появляются из-за какого-то события (например, праздник, распродажа и т.д.).
10.	*weather_effects*: словарь, где ключи — это погодные факторы (например, температура), а значения — чувствительность к этим факторам (например, как изменение температуры на 10°C влияет на количество посетителей).



---

В нашем примере для каждого дня в году генерируется количество искусственных посетителей. Например, на 30-й и 120-й день будет значительный рост числа посетителей из-за неких событий, а на все дни будет оказывать влияние температура с коэффициентом чувствительности -2 (То есть каждые 10°C изменения температуры -2 посетителя)

---

3. Загрузка и объединение данных о погоде
"""

# Список файлов с URL
file_list = [
    ("yamaguchi__ichigaya-kana__yuya.csv", "https://drive.google.com/file/d/10Q8JpMx92cxsf9Nl6dhn71F5tjtCrH16"),
    ("yamagata__takamine-kana__takamine.csv", "https://drive.google.com/file/d/10zTWt__VtcMkeOTb-MzP3MemTf4CYAwv"),
    ("yamaguchi__wada-kana__wada.csv", "https://drive.google.com/file/d/11pWF4lYlnw9GM6E-GlbcnG1_Zzkto53R"),
    ("yamaguchi__akiyoshidai-kana__akiyoshidai.csv", "https://drive.google.com/file/d/12FouJDAWxr4ZtO80W_HTwjBiaU30ZG3j"),
    ("yamaguchi__shimonoseki-kana__shimonoseki.csv", "https://drive.google.com/file/d/12K2ofD7yeRU-I3oKRlQh-Z9KDtjyYs9L"),
    ("yamagata__yonezawa-kana__yonezawa.csv", "https://drive.google.com/file/d/15G7IThTwHvtzCGWfdck9cXK-D2vwNcU0"),
    ("yamaguchi__hirose-kana__hirose.csv", "https://drive.google.com/file/d/16QsQMl5HUb6Nkrkizu8-By5QJ9Ca7l4r"),
    ("yamagata__tanarazawa-kana__ovanazawa.csv", "https://drive.google.com/file/d/16xWcg9Kaz8RGrrY-BAR91K_2tuJK1m70"),
    ("yamanashi__otome-lake-kana__otomeco.csv", "https://drive.google.com/file/d/17VsPBTUffrqLw5G9oWYcOzVAni3quzql"),
    ("yamagata__takahata-kana__takahata.csv", "https://drive.google.com/file/d/18KCHNVkWFtIcJcDS9VeF7VyRxtLKbqUG"),
    ("yamagata__yamagata-kana__yamagata.csv", "https://drive.google.com/file/d/1ADrT2GuI3WIJk2IbPG-gChFqqqjtA5wK"),
    ("yamagata__tsuruoka-kana__truoca.csv", "https://drive.google.com/file/d/1DulU62AkQx0Um-BaWIhLiATnYxsbVsts"),
    ("yamaguchi__anshinjo-kana__agenosha.csv", "https://drive.google.com/file/d/1GCFtDKqfIWoFp45LqlcxYdTcseotRQOU"),
    ("yamaguchi__iwakuni-kana__iwakuni.csv", "https://drive.google.com/file/d/1HchBjMaz2A8ojp-_vTzRw8GqlXyt6NSg"),
    ("yamaguchi__higashiitoi-kana__higashitsu.csv", "https://drive.google.com/file/d/1KHpvJHpzikxBAScqtVCJUif9GxoBEqN-"),
    ("yamanashi__lake-kawaguchi-kana__kawaguchiko.csv", "https://drive.google.com/file/d/1LXv-BgiJaK3SHHNaHS6bV0Wy31wzVd29"),
    ("yamaguchi__yanai-kana__yanai.csv", "https://drive.google.com/file/d/1QbYZD5651iKo4QKrprW82CnkKx2Xllc1"),
    ("yamaguchi__toyota-kana__toyota.csv", "https://drive.google.com/file/d/1RBzrhn9a8K378rR0Dz4hg1F_JcijuXoO"),
    ("yamaguchi__tokuzi-kana__tokusa.csv", "https://drive.google.com/file/d/1S9iHMGfoJSQOne3A00wZ6Yt7t4yARnWU"),
    ("iwate__milk-kana__karmai.csv", "https://drive.google.com/file/d/15S3ChVW_lM2AuXB2um8qdxRgk-pc1COY"),
    ("yamanashi__otsuki-kana__otsuki.csv", "https://drive.google.com/file/d/1TI-uUyAQEgBZaYsX11sVwc-emKALGjwA"),
    ("iwate__onunato-kana__oofunat.csv", "https://drive.google.com/file/d/1UYoE6ATZyU6QmWXFBt5PhGZYOyu5jFIB"),
    ("yamanashi__katsunuma-kana__cutnuma.csv", "https://drive.google.com/file/d/1WpS9EcV0-IjBk2EjuUllMu6oGVjHwgjP"),
    ("yamanashi__mt-fuji__fujisan.csv", "https://drive.google.com/file/d/1XIt-_L87P-DBob1BpISoV5-XIsOvyOfT"),
    ("yamaguchi__rausan-mountain-kana__lacanzan.csv", "https://drive.google.com/file/d/1YSzUXc6jBUTZfYbLNxOup-sWEELm0VDz"),
    ("yamaguchi__kuga-katakana__kuga.csv", "https://drive.google.com/file/d/1Z9CGmR2f3HE9lSIwcKSntzB5-lLpjfiq"),
    ("yamaguchi__kamatsu-katakana__kudamatsu.csv", "https://drive.google.com/file/d/1ZU0pScKAjlWcjtIapell44G_AoNnDoA7"),
    ("yamaguchi__yamaguchi-kana__yamaguchi.csv", "https://drive.google.com/file/d/1a6HRYaXiuEn5mInICPJ9QWHSFqMBIoTD"),
    ("iwate__yamada-kana__yamada.csv", "https://drive.google.com/file/d/1FxOUpzvEQPxGn7chEv-iXg3ejwmGMDkr"),
    ("yamanashi__kana-kana__kirishi.csv", "https://drive.google.com/file/d/1csoccEi61p1dipJVdjb0aMlOUvQBe5xC"),
    ("yamaguchi__hofu-kana__houph.csv", "https://drive.google.com/file/d/1e6t5OmlVIqRaz5b4YGka268N1Efk2kbu"),
    ("yamanashi__kofu-kana__koff.csv", "https://drive.google.com/file/d/1eTgpIIX1LU49HMuZsltpSZMH2YQj4426"),
    ("yamagata__upper-kusatsu-kana__kamikesatu.csv", "https://drive.google.com/file/d/1foC9XeMGTtktjC8xvaoz8oplLA3oMQMj"),
    ("yamanashi__southern-kana__nambu.csv", "https://drive.google.com/file/d/1glxTNyxh6VpjrQ3vJsPV-tQehct276b8"),
    ("yamaguchi__ube-kana__NONE.csv", "https://drive.google.com/file/d/1gzGg_IDTs7WOFQJcnohswdOJCfS_ijuy"),
    ("yamaguchi__sasa-kana__susa.csv", "https://drive.google.com/file/d/1kbH1q5Cj5S3HP2tWZv2BujnyK25vhLlO"),
    ("yamanashi__fujikawa-kana__fujikawa.csv", "https://drive.google.com/file/d/1lLQqRzZ1MDWuiTPUdBPDIFQ88NJisVnC"),
    ("yamanashi__yamanaka-kana__yamanaka.csv", "https://drive.google.com/file/d/1kb_amRXx7zmGGmbeT3rJSh8geMsSRdMt"),
    ("iwate__morioka-kana__morioka.csv", "https://drive.google.com/file/d/1gWaKgrxJHh90_h5AsUK6_773RtQLz7Ps"),
    ("yamaguchi__hagi-kana__haghi.csv", "https://drive.google.com/file/d/1sG-o-Tlu2YiQTYfszOFbyaWCtqMYcVT_"),
    ("yamanashi__ayasaki-kana__nilasaki.csv", "https://drive.google.com/file/d/1t50DuaFa5mNAUt8DrlLsZMfuYILB-Jbe"),
    ("yamaguchi__kano-kana__kano.csv", "https://drive.google.com/file/d/1txoAwZRckFjWQJoc17x-QBxJzMd9koqV"),
    ("yamaguchi__shinoo-kana__shinobu.csv", "https://drive.google.com/file/d/1v9n0_sQoYXMPc6OXXMiQGJeOCw-0nQrN"),
    ("yamanashi__oizumi-kana__oosimmi.csv", "https://drive.google.com/file/d/1wLZqo-yHezGI3s2G8xG9aLQGZaZU4SoY"),
    ("yamanashi__koseki-kana__fullseki.csv", "https://drive.google.com/file/d/1xg4CzDgt2JPvVLNYS05KGe1X2wgUj2OH"),
    ("yamanashi__uenohara-kana__wenohara.csv", "https://drive.google.com/file/d/1yILFQVyAS9dCJGpbqymV1U8oHCXTPvUK"),
    ("wakayama__kagiri-kana__katsuragi.csv", "https://drive.google.com/file/d/10_0xzL-2Ijay3p9Oiju9tRrC6O0_HI4r"),
    ("toyama__yao-kana__yatsu.csv", "https://drive.google.com/file/d/10kqQLnMkcIJfl25SwSYhZo15DGTtAmgx"),
    ("wakayama__kurisugawa-kana__krisgawa.csv", "https://drive.google.com/file/d/1841HQxEIFSzn00qaQbyWPtAOtSOKC3aS"),
    ("yamagata__arasawa-kana__alasawa.csv", "https://drive.google.com/file/d/18IWDFjLlMRFEhu3nhcbBA_PBBIoHCTi_"),
    ("yamagata__murayama-kana__murayama.csv", "https://drive.google.com/file/d/18rLYsTeO68FPAo48kSSPJoUca7XjDxhN"),
    ("wakayama__nanki-shirahama-kana__nanxirahama.csv", "https://drive.google.com/file/d/1A2lTUN0Kvj76BP9ibYrGuBYJwfQpW_Xh"),
    ("yamagata__hijiori-kana__hizaorie.csv", "https://drive.google.com/file/d/1BbzjkgOv3DciiSYPE3NF57vDMCB1M_dW"),
    ("yamagata__senki__NONE.csv", "https://drive.google.com/file/d/1C-OGeNmsIiLgE-S3e6TaCLRYwYsxMLAS"),
    ("wakayama__kagawa-kana__irokawa.csv", "https://drive.google.com/file/d/1Cl5pemFZ-ltiXfKPAEBBGKwTcKciqirb"),
    ("wakayama__konomiya-konoma__honghu.csv", "https://drive.google.com/file/d/1D2YGzsiWlFVxp8d8CB50Yy2ofiRN_ZHP"),
    ("yamagata__mukamachi-kana__mukai-machi.csv", "https://drive.google.com/file/d/1DQLeYNBMHf-s_Flk-_qeMBQSZdNvSW0x"),
    ("iwate__iwaizumi-kana__iwazimi.csv", "https://drive.google.com/file/d/1vE7Dl8rtBezgtVn59W45AHxXVQlsNtYS/view?usp=sharing"),
    ("wakayama__yuasa-kana__yuasa.csv", "https://drive.google.com/file/d/1ICibFxfnQBC-xIpbE_RVbozoefJHfW3n"),
    ("ishikawa__hakui-kana__hakui.csv", "https://drive.google.com/file/d/1h6E9Mi0RtUS78j3dDOb29LdVXBro3Bzj/view?usp=sharing"),
    ("wakayama__ryujin-kana__ryu-jin.csv", "https://drive.google.com/file/d/1KLPrHKu07CjejISqvj7F3AaOQ0pK1HOv"),
    ("yamagata__higashine-kana__higacine.csv", "https://drive.google.com/file/d/1LvUIaCzARljj3Li7t2zeA8gcpNlDqI7v"),
    ("toyama__uozu-kana__wuzu.csv", "https://drive.google.com/file/d/1LyTtgogF8VtxGm6QDVX8C3Y_mJmtKwZN"),
    ("wakayama__shingu-katakana__shingu.csv", "https://drive.google.com/file/d/1MbgCHknzOQ1glozGjqhO-zmRTrnTODbE"),
    ("wakayama__shionomisaki-kana__shionomisaki.csv", "https://drive.google.com/file/d/1N3j08sC7SmiWWdrx3YN0dpJbuJpr3lXD"),
    ("hyogo__nishiwaki-kana__nishiwaki.csv", "https://drive.google.com/file/d/1JIcWTFKqFQ-rmIcMp5eMAObPb8w3T0dm/view?usp=sharing"),
    ("wakayama__shimizu-kana__shimizu.csv", "https://drive.google.com/file/d/1ztmdCh_GRjIo4etutiScDFO1PLb0Rf6s"),
    ("wakayama__katsuragiyama-kana__katsuragi-sun.csv", "https://drive.google.com/file/d/1P4pWsoXTae9z7My-0srkpaJ9ZBphArZ_"),
    ("yamagata__final-head-pot-kana__sasunabe.csv", "https://drive.google.com/file/d/1znAuVPhHvL2ICFsUvzwZZgkpe-FSSQiw"),
    ("wakayama__wakayama-kana__wakayama.csv", "https://drive.google.com/file/d/1Ta9VBE8KdADhYDTlqGawilA3Ia6u3SEW"),
    ("wakayama__mt-gamadanama__gomadanzan.csv", "https://drive.google.com/file/d/1USCQMjEXnVDZOxbr8NYYhwerOgwV4Zo5"),
    ("yamagata__hamanaka-kana__hamanaka.csv", "https://drive.google.com/file/d/1YZQyh_JxopvzNZ3U4XxO0zRCqrVEkkW3"),
    ("yamagata__oiizawa-kana__ooisawa.csv", "https://drive.google.com/file/d/1_nh3hy-VxIvzUnr1A2FW6VganbmuA_1F"),
    ("yamagata__leba-kana__atelazawa.csv", "https://drive.google.com/file/d/1bbt3FfVAcKy5bPPeRgwOhMOYQI4gSwx3"),
    ("yamagata__kamiyama-nakayama-kana__camino-yamanaka-yama.csv", "https://drive.google.com/file/d/1cvtDC5K7bWeOLs-9nexgnEp3xQTRMzDO"),
    ("yamagata__kagawa-kana__kalikawa.csv", "https://drive.google.com/file/d/1ft0Wp6JLcbl2E6kwrQAFLpZSal2ztRPL"),
    ("wakayama__kawabe-kana__kawabe.csv", "https://drive.google.com/file/d/1guPwCpN-Fv4pKWhWMieHAaL_9BOPXlqg"),
    ("yamagata__nakatsugawa-kana__nakagugawa.csv", "https://drive.google.com/file/d/1j59WNu7L0wlaJL_1vYoiJ3Oh2iVA3yw5"),
    ("wakayama__hikawagawa-kana__hikigawa.csv", "https://drive.google.com/file/d/1mjU9khrFDi9Ke3TE_dTBqmmFIDUAh8d_"),
    ("yamagata__oguni-kana__oguni.csv", "https://drive.google.com/file/d/1oyVbqHkQHgCg4ROPo0IKPPXPxpRuP4wi"),
    ("yamagata__nagai-kana__nagai.csv", "https://drive.google.com/file/d/1p6nyKMpRdo3xrygLl-PnWm1jiiKj49AQ"),
    ("yamagata__mouse-movement-kana__nazgaseki.csv", "https://drive.google.com/file/d/1vBTr3HzgW4N9qZwHFjiIIrSLkAQNtA2r")
]


all_weather_data = pd.DataFrame()
for filename, url in file_list:
    weather_data = load_csv_from_gdrive(url)
    if weather_data is not None:
        weather_data['station_name'] = filename.replace('.csv', '')

        weather_data['synthetic_visitors'] = generate_synthetic_visitors(len(weather_data))
        all_weather_data = pd.concat([all_weather_data, weather_data], ignore_index=True)

"""

---

4. Загрузка данных из остальных файлов"""

# Список файлов с остальными URL для загрузки данных
file_list_other = [
    ("air_station_distances.csv", "https://drive.google.com/file/d/1nE7GO3-Wu-d12wN5cxikviKKhRZTCEVa/view?usp=sharing"),
    ("air_store_info_with_nearest_active_station.csv", "https://drive.google.com/file/d/1SvcIQEyWu5qp6XEFW1oiZrEZ3v_r7mPK/view?usp=sharing"),
    ("feature_manifest.csv", "https://drive.google.com/file/d/1D6p2E9K-n69JczqnYywpusTajxuu8PMT/view?usp=sharing"),
    ("hpg_station_distances.csv", "https://drive.google.com/file/d/1txPTIcnd87_TWRmatuBQyF9rKoXm0TxY/view?usp=sharing"),
    ("hpg_store_info_with_nearest_active_station.csv", "https://drive.google.com/file/d/1ItQBajS8xojh8Go9sa6bxU2Ip2Mbd208/view?usp=sharing"),
    ("nearby_active_stations.csv", "https://drive.google.com/file/d/1xBiTVfj62S2Xd3Yj0tSFaXuHPvNQkwYI/view?usp=sharing"),
    ("weather_stations.csv", "https://drive.google.com/file/d/1EBVWrjhkFLKE0IY5xMOO7KcGM9TggVt8/view?usp=sharing")
]


data_dict = {}
for filename, url in file_list_other:
    data = load_csv_from_gdrive(url)
    if data is not None:
        data_dict[filename] = data

"""

---

5. Сохранение и визуализация данных"""

all_weather_data.to_csv('all_weather_data_with_synthetic_visitors.csv', index=False)

plt.figure(figsize=(14, 7))

plt.subplot(2, 1, 2)
sns.histplot(all_weather_data['synthetic_visitors'], bins=50, kde=True)
plt.title('Distribution of Synthetic Visitors')
plt.xlabel('Number of Visitors')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

"""Предсказание количества посетителей


---

1. Импорт библиотек и определение функции загрузки данных
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score


def load_csv_from_gdrive(url):
    file_id = url.split('/d/')[1].split('/')[0]
    download_url = f'https://drive.google.com/uc?id={file_id}'
    return pd.read_csv(download_url)

"""

---

2. Загрузка объединенных данных о погоде и данных из других файлов"""

all_weather_data = pd.read_csv('all_weather_data_with_synthetic_visitors.csv')

file_list_other = [
    ("air_store_info_with_nearest_active_station.csv", "https://drive.google.com/file/d/1SvcIQEyWu5qp6XEFW1oiZrEZ3v_r7mPK/view?usp=sharing"),
    ("hpg_store_info_with_nearest_active_station.csv", "https://drive.google.com/file/d/1ItQBajS8xojh8Go9sa6bxU2Ip2Mbd208/view?usp=sharing"),
    ("nearby_active_stations.csv", "https://drive.google.com/file/d/1xBiTVfj62S2Xd3Yj0tSFaXuHPvNQkwYI/view?usp=sharing"),
    ("weather_stations.csv", "https://drive.google.com/file/d/1EBVWrjhkFLKE0IY5xMOO7KcGM9TggVt8/view?usp=sharing")
]

data_dict = {}
for filename, url in file_list_other:
    data = load_csv_from_gdrive(url)
    if data is not None:
        data_dict[filename] = data

"""

---

3. Объединение данных"""

air_store_info = data_dict['air_store_info_with_nearest_active_station.csv']
hpg_store_info = data_dict['hpg_store_info_with_nearest_active_station.csv']
nearby_active_stations = data_dict['nearby_active_stations.csv']
weather_stations = data_dict['weather_stations.csv']


combined_data = pd.merge(all_weather_data, air_store_info, how='left', left_on='station_name', right_on='station_id')
combined_data = pd.merge(combined_data, hpg_store_info, how='left', left_on='station_name', right_on='station_id', suffixes=('_air', '_hpg'))
combined_data = pd.merge(combined_data, nearby_active_stations, how='left', left_on='station_name', right_on='id', suffixes=('_nearby', '_weather'))
combined_data = pd.merge(combined_data, weather_stations, how='left', left_on='station_name', right_on='station_id', suffixes=('_weather', '_final'))

"""

---

4. Преобразование и обработка данных"""

combined_data['calendar_date'] = pd.to_datetime(combined_data['calendar_date'])
combined_data['days_since_start'] = (combined_data['calendar_date'] - combined_data['calendar_date'].min()).dt.days
combined_data = combined_data.drop(columns=['calendar_date'])

numeric_columns = combined_data.select_dtypes(include=[np.number]).columns
combined_data[numeric_columns] = combined_data[numeric_columns].fillna(combined_data[numeric_columns].mean())

"""

---

5. Определение признаков и целевой переменной"""

features = ['avg_temperature', 'high_temperature', 'low_temperature',
            'precipitation', 'hours_sunlight', 'solar_radiation',
            'deepest_snowfall', 'total_snowfall', 'avg_wind_speed',
            'avg_vapor_pressure', 'avg_local_pressure', 'avg_humidity',
            'avg_sea_pressure', 'cloud_cover', 'synthetic_visitors',
            'station_vincenty_air', 'station_great_circle_air',
            'altitude_weather', 'days_since_start']

X = combined_data[features]
y = combined_data['synthetic_visitors']

"""

---

6. Разделение данных на тренировочные и тестовые наборы"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""

---

7. Обучение и оценка моделей"""

models = {
    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),
    'Gradient Boosting': GradientBoostingRegressor(n_estimators=100, random_state=42)
}

colors = {
    'Random Forest': 'green',
    'Gradient Boosting': 'red'
}


true_color = 'black'
pred_color = 'orange'

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    print(f"{name} - Mean Squared Error:", mean_squared_error(y_test, y_pred))
    print(f"{name} - R^2 Score:", r2_score(y_test, y_pred))


    plt.figure(figsize=(8, 8))
    plt.scatter(y_test, y_test, alpha=0.5, color=true_color, label='Искусственные значения')
    plt.scatter(y_test, y_pred, alpha=0.5, color=pred_color, label='Предсказанные значения')
    plt.xlabel('Искусственные значения')
    plt.ylabel(f'Предсказанные значения ({name})')
    plt.title(f'{name}: Искусственные vs. Предсказанные')
    plt.legend()
    plt.grid(True)
    plt.show()

"""

---

8. График зависимости предсказанного количества посетителей от дня наблюдений"""

results_df = pd.DataFrame({
    'days_since_start': X_test['days_since_start'],
    'True_Values': y_test,
    'Random_Forest_Predictions': models['Random Forest'].predict(X_test),
    'Gradient_Boosting_Predictions': models['Gradient Boosting'].predict(X_test)
})

results_df = results_df.sort_values(by='days_since_start')

plt.figure(figsize=(14, 7))

plt.plot(results_df['days_since_start'], results_df['True_Values'], label='Истинные значения', color='black', linestyle='-', marker='o')
plt.plot(results_df['days_since_start'], results_df['Random_Forest_Predictions'], label='Предсказания Random Forest', color='green', linestyle='--')
plt.plot(results_df['days_since_start'], results_df['Gradient_Boosting_Predictions'], label='Предсказания Gradient Boosting', color='red', linestyle='--')

plt.xlabel('День наблюдений')
plt.ylabel('Количество посетителей')
plt.title('Зависимость количества посетителей от дня наблюдений')
plt.legend()
plt.grid(True)
plt.show()

"""9. График корреляции количества посетителей с погодными переменными"""

correlation_matrix = combined_data[features + ['synthetic_visitors']].corr()


plt.figure(figsize=(12, 10))
cax = plt.matshow(correlation_matrix, cmap='coolwarm', vmin=-1, vmax=1)
plt.colorbar(cax)


plt.xticks(range(len(correlation_matrix.columns)), correlation_matrix.columns, rotation=90)
plt.yticks(range(len(correlation_matrix.columns)), correlation_matrix.columns)
plt.title('Корреляция между погодными переменными и количеством посетителей')
plt.show()

"""**На основе добавленных графиков:**
1.	График зависимости предсказанного количества посетителей от дня наблюдений позволяет наглядно увидеть, как предсказания обеих моделей (Random Forest и Gradient Boosting) сравниваются с реальными значениями в зависимости от дня наблюдений. Это помогает оценить стабильность и точность предсказаний моделей на протяжении времени.
2.	График корреляции количества посетителей с погодными переменными демонстрирует, как количество посетителей связано с различными погодными факторами. Тепловая карта предоставляет информацию о степени корреляции между количеством посетителей и переменными погоды, что может помочь в понимании влияния погоды на посещаемость.

---
**Вывод**

В ходе анализа и предсказания количества посетителей были протестированы две модели регрессии: Random Forest и Gradient Boosting. Результаты оценки моделей показали следующее:

1. Random Forest:
* Среднеквадратичная ошибка (Mean Squared Error, MSE): 0.000125
* Коэффициент детерминации (R^2 Score): 0.9999999

Модель Random Forest продемонстрировала выдающиеся результаты с очень низким значением среднеквадратичной ошибки и почти идеальным коэффициентом детерминации. Это указывает на то, что модель хорошо справляется с предсказанием количества посетителей, объясняя почти всю вариацию в данных.

2. Gradient Boosting:
* Среднеквадратичная ошибка (MSE): 0.032
* Коэффициент детерминации (R^2 Score): 0.9999795

Модель Gradient Boosting также показала отличные результаты, но с немного более высоким значением среднеквадратичной ошибки по сравнению с Random Forest и немного меньшим коэффициентом детерминации. Тем не менее, она все еще демонстрирует высокую точность предсказаний.



---

**Заключение**

Обе модели показали очень высокие результаты при предсказании количества посетителей. Однако модель Random Forest оказалась немного точнее, обеспечивая более низкое значение MSE и более высокий коэффициент детерминации. Это свидетельствует о ее более точном соответствии данным в данной задаче. В общем, обе модели могут считаться успешными, но выбор модели может зависеть от специфических требований к точности и вычислительным ресурсам.
"""